
1) 실행가능한 jar파일 만들기

gradle jar

---> build/libs/simpleboard-0.0.1.SNAPSHOT.jar

2) 해당 jar파일을 실행하기

cd build/libs/
java -jar simpleboard-0.0.1.SNAPSHOT.jar

종료 : ctrl + C

* jar 의 표준이 없다. Spring에서 실행가능한 jar를 만들기위한 새로운 방법을 만들었다.
  스프링 부트 플러그인(maven, gradle)을 이용하여 jar로 만들어야 한다.

* spring boot에서는 webapp폴더아래에 파일을 작성하지 않는다.

* 정적인 리소스는 src/main/resources/static 폴더에 넣는다.
  타임리프 관련된 템플릿은 src/main/resources/templates 폴더에 넣는다.

-----------------------------------------------------------------------

3) spring security를 추가한다.

compile('org.springframework.boot:spring-boot-starter-security')

- 모든 경로를 로그인해야만 접근할 수 있다.
- 기본 사용자가 추가된다. 사용자 id : user, 암호는 부트 애플리케이션이 실행될 때 출력된다.

-----------------------------------------------------------------------

4) Spring security 설정파일을 작성한다.

작성할 파일 : WebApplicationSecurity
WebSecurityConfigurerAdapter 를 상속받아서 만든다.



package examples.boot.simpleboard.config;

import examples.boot.simpleboard.security.SimpleBoardTokenRepositoryImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import javax.sql.DataSource;

@Configuration
public class WebApplicationSecurity  extends WebSecurityConfigurerAdapter {
//    @Autowired
//    DataSource dataSource;
//
//    @Autowired
//    SimpleBoardTokenRepositoryImpl simpleBoardTokenRepositoryImpl;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/boards").and()
            .authorizeRequests()
                .requestMatchers(new AntPathRequestMatcher("/**.html")).permitAll()
                .requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()
                .antMatchers("/css/**").permitAll()
                .antMatchers("/boards/writeform").hasRole("USER")
                .antMatchers("/boards/**").permitAll()
                .antMatchers("/users/**").permitAll()
                .antMatchers("/admin/**").hasRole("ADMIN")
                .antMatchers("/h2-console/**").permitAll()
                .anyRequest().fullyAuthenticated()
                .and()
                .csrf().ignoringAntMatchers("/**")
//                .ignoringAntMatchers("/h2-console/**")
                .and().headers().frameOptions().disable()
                .and().formLogin()
//                .and().rememberMe().tokenRepository(simpleBoardTokenRepositoryImpl).rememberMeParameter("remember-me").tokenValiditySeconds(1209600)
                .and().logout().permitAll();
    }

}


참고자료 :


spring security 이수홍 slideshare

https://www.youtube.com/watch?v=LJ0SwSaT4FY
https://www.slideshare.net/sbcoba/spring-camp-27140402



--------------------------

5) 롤권한 엔티티 추가

User와 UserRole은 1:* 관계이다.
클래스다이어그램과 ERD를 그려 표현할 수 있어야 한다.

package examples.boot.simpleboard.domain;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Table(name = "user_roles")
@Getter
@Setter
public class UserRole {
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Long id;

    @Column(name = "role_name")
    private String roleName;
}


package examples.boot.simpleboard.domain;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "users")
@Getter
@Setter
public class User implements Serializable {
    public User(){
        regdate = LocalDateTime.now();
    }
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    @JsonIgnore
    private String password;
    private LocalDateTime regdate;

    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)
    @JoinColumn(name="user_id")
    private List<UserRole> roles;
}
-------------------------------------------------
6) QClass 생성

gradle build -x test

-------------------------------------------------

7) h2 console에 접속

http://localhost:8080/h2-console

url : jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
id : sa
password : sa

application.yml 복사를 한다.
스프링 부트 애플리케이션을 재시작

--------------------------------------------------

8) data.sql 파일을 다음과 같이 수정, h2 console에서 users, user_roles테이블 확

insert into users(id, name, email, password, regdate) values (3, 'kim sungpark', 'urstory@gmail.com', '{bcrypt}$2a$10$YawlEecaIvN5xMW7886JhOj6Iuy..f.XfoGy8/vJCW/5iRQlP3pzy', now());
insert into users(id, name, email, password, regdate) values (4, 'lee', 'lee@gmail.com', '{bcrypt}$2a$10$YawlEecaIvN5xMW7886JhOj6Iuy..f.XfoGy8/vJCW/5iRQlP3pzy', now());
insert into users(id, name, email, password, regdate) values (5, 'choi', 'choi@gmail.com', '{bcrypt}$2a$10$YawlEecaIvN5xMW7886JhOj6Iuy..f.XfoGy8/vJCW/5iRQlP3pzy', now());
-- insert into users(id, name, email, password, regdate) values (6, 'han', 'han@gmail.com', '1234', now());
-- insert into users(id, name, email, password, regdate) values (7, 'han', 'han@gmail.com', '1234', now());
insert into user_roles(id, user_id, role_name) values (1, 3, 'USER');
insert into user_roles(id, user_id, role_name) values (2, 3, 'ADMIN');
insert into user_roles(id, user_id, role_name) values (3, 4, 'USER');
insert into user_roles(id, user_id, role_name) values (4, 5, 'USER');

---------------------------------------------------

9) 회원가입 페이지

/users/joinform  (회원가입 폼)
/users/join      (회원정보 등록)

UserController --> UserService ----> UserRepository

package examples.boot.simpleboard.controller;

import examples.boot.simpleboard.domain.User;
import examples.boot.simpleboard.domain.UserRole;
import examples.boot.simpleboard.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/users")
public class UserController {
    @Autowired
    UserService userService;

    @GetMapping(path = "/joinform")
    public String joinform(ModelMap modelMap){
        User user = new User();
        modelMap.addAttribute("user", user);
        return "users/joinform";
    }

    @PostMapping(path = "join")
    public String join(@ModelAttribute User user){

        PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        List<UserRole> userRoleList = new ArrayList<>();
        UserRole userRole = new UserRole();
        userRole.setRoleName("USER");
        userRoleList.add(userRole);
        user.setRoles(userRoleList);

        System.out.println("encode password : " + user.getPassword());
        User saveUser = userService.addUser(user);

        System.out.println(saveUser.getId());
        return "redirect:/boards";
    }
}

UserService에는 다음의 메소드를 선언

User addUser(User user);

UserServiceImpl에는 다음의 메소드를 추가

    @Override
    public User addUser(User user) {
        User saveUser = userRepository.save(user);
        return saveUser;
    }

resources/templates/users/ 폴더아래에 joinform.html 파일을 작성

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>회원가입폼</title>
    </head>
    <body>
        <h1>회원가입</h1>
        <form method="post" th:action="@{/users/join}" th:object="${user}" action="#">
            <p>name: <input type="text" th:field="*{name}" /></p>
            <p>email: <input type="text" th:field="*{email}" /></p>
            <p>password: <input type="password" th:field="*{password}" /></p>
            <p><input type="submit" value="Submit" /> <input type="reset" value="Reset" /></p>
        </form>
    </body>
</html>
---------------------------------------------------
10) 회원정보로 로그인

UserRepository에 email로 User를 조회하는 메소드를 추가
query method

package examples.boot.simpleboard.repository;

import com.querydsl.core.Tuple;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.impl.JPAQuery;
import examples.boot.simpleboard.base.JpaQueryDslPredicateRepository;
import examples.boot.simpleboard.domain.QUser;
import examples.boot.simpleboard.domain.User;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;

// @Repository를 붙이지 않아도 Repository로 등록된다.
public interface UserRepository
        extends JpaQueryDslPredicateRepository<User, Long> {

    public User findUserByEmail(String email);

}

참고 문서 : http://arahansa.github.io/docs_spring/jpa.html#repositories.query-methods.details


UserService와 UserServiceImpl에 해당 메소드를 사용하는 메소드를 추가

    @Override
    @Transactional(readOnly = true)
    public User getUserByEmail(String email) {
        return userRepository.findUserByEmail(email);
    }


Spring Security가 내부적으로 사용하는 UserDetailsService객체를 바꾼다.


package examples.boot.simpleboard.security;

import examples.boot.simpleboard.domain.User;
import examples.boot.simpleboard.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class SimpleBoardUserDetailsService implements UserDetailsService {
    @Autowired
    UserService userService;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userService.getUserByEmail(username);

        List<GrantedAuthority> list = new ArrayList<>();
        user.getRoles().forEach(role -> list.add(new SimpleGrantedAuthority("ROLE_" + role.getRoleName())));

        UserDetails userDetails = new org.springframework.security.core.userdetails.User(user.getEmail(), user.getPassword(), list);
        return userDetails;
    }
}


// 재시작 한 후 사용자 id와 암호로 로그인한다.

---------------------------------------------------


11) 사용자 로그인 폼을 만든다.


WebApplicationSecurity에서 loginForm()설정을 수정한다.

package examples.boot.simpleboard.config;

import examples.boot.simpleboard.security.SimpleBoardTokenRepositoryImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import javax.sql.DataSource;

@Configuration
public class WebApplicationSecurity  extends WebSecurityConfigurerAdapter {
//    @Autowired
//    DataSource dataSource;
//
//    @Autowired
//    SimpleBoardTokenRepositoryImpl simpleBoardTokenRepositoryImpl;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/boards").and()
            .authorizeRequests()
                .requestMatchers(new AntPathRequestMatcher("/**.html")).permitAll()
                .requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()
                .antMatchers("/css/**").permitAll()
                .antMatchers("/boards/writeform").hasRole("USER")
                .antMatchers("/boards/**").permitAll()
                .antMatchers("/users/**").permitAll()
                .antMatchers("/admin/**").hasRole("ADMIN")
                .antMatchers("/h2-console/**").permitAll()
                .anyRequest().fullyAuthenticated()
                .and()
                .csrf().ignoringAntMatchers("/**")
//                .ignoringAntMatchers("/h2-console/**")
                .and().headers().frameOptions().disable()
                .and().formLogin().loginPage("/users/login").usernameParameter("id").passwordParameter("password")
//                .and().rememberMe().tokenRepository(simpleBoardTokenRepositoryImpl).rememberMeParameter("remember-me").tokenValiditySeconds(1209600)
                .and().logout().permitAll();
    }

}



UserController 에 다음의 메소드를 추가한다.

    @GetMapping(path = "/login")
    public String login(){
        return "users/login";
    }


resources/templates/users/login.html파일을 작성한다.



<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>회원가입폼</title>
    </head>
    <body>
        <h1>로그인</h1>
        <form method="post" th:action="@{/users/login}"action="#">
            <p>email: <input type="text" name="id"/></p>
            <p>password: <input type="password" name="password" /></p>
            <p>Remember Me: <input type="checkbox" name="remember-me" /></p>
            <p><input type="submit" value="Submit" /> <input type="reset" value="Reset" /></p>
        </form>
    </body>
</html>


-----------------------------------------------------
Principal객체를 통해서 로그인 한 정보를 구할 수 있다.

package examples.boot.simpleboard.controller.api;

import examples.boot.simpleboard.domain.User;
import examples.boot.simpleboard.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserApiController {
    @Autowired
    UserService userService;

    @GetMapping
    public List<User> getUsers(Principal principal){
        System.out.println("-------------------------------");
        System.out.println(principal.getName());
        System.out.println("-------------------------------");

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentPrincipalName = authentication.getName();
        System.out.println("currentPrincipalName : " + currentPrincipalName);

        return userService.getUsers();
    }
}
