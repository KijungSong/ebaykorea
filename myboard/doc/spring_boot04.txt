

1. thymeleaf에서 레이아웃을 설정하려면 다음의 의존성을 추가.


compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '2.3.0'


ThymeleafAutoConfiguration 클래스의 내용을 보면 해당 라이브러리가 있을 경우에만 Layout을 지정할 수 있도록 되어있다.


```
	@Configuration
	@ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")
	protected static class ThymeleafWebLayoutConfiguration {

		@Bean
		@ConditionalOnMissingBean
		public LayoutDialect layoutDialect() {
			return new LayoutDialect();
		}

	}
```

2. layout이란 무엇인가?


resources/templates/layout/main_layout.html

```
<!DOCTYPE html>
<html lang="ko" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
    <head th:replace="fragments/main/main_header :: mainHead"> </head>
    <body th:replace="fragments/main/main_body :: mainBody"> </body>
</html>
```

head태그와 body태그를 main_header.html과 main_body.html로 바꾸겠다.

fragments/main/main_header.html

```
<!DOCTYPE html>
<html lang="ko" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
        <head th:fragment="mainHead">
                <th:block th:include="fragments/common/common_include"></th:block>
        </head>
</html>
```

fragments/main/main_body.html

```
<!DOCTYPE html>
<html lang="ko" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">

    <body th:fragment="mainBody">
        <th:block th:include="fragments/common/common_body"></th:block>
        <th:block th:include="fragments/common/common_footer"></th:block>
    </body>
</html>

```


BoardController 컨트롤러를 보자. /boards/samples


    @GetMapping(path = "/samples")
    public String samples(){
        return "boards/samples";
    }

boards/samples.html 파일

html태그에 보면 다음과 같은 속성이 있다.

layout:decorator="layout/main_layout"

```
<!DOCTYPE html>
<html lang="ko" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorator="layout/main_layout">

    <th:block layout:fragment="html_head">
        <title>header에 들어갈 title입니다.</title>
    </th:block>

    <th:block layout:fragment="body_left">
        <h3>왼쪽!</h3>
    </th:block>

    <th:block layout:fragment="body_main">
        <h1>멋지다!</h1>
    </th:block>

    <th:block layout:fragment="body_right">
        <h3>오른쪽!</h3>
    </th:block>
</html>

```




레이아웃 설정파일

main_layout.html
        ---------->
              main_header.html
                      -----> common_include.html
                                   ---> css, javascript 설정
                                   ---> html_head
        ---------->
              main_body.html
                     ------> common_body.html
                                   ---> body_left, body_main, body_right
                     ------> common_footer.html
                                    <pre>2018년 4월</pre>


---------------------------------------------

resources/static 폴더아래에 git-logo.png 파일을 저장하였다.

http://localhost:8080/static/git-logo.png

위의 경로로 접근하고 싶다면?

WebMvcConfigurer 를 구현하고 있는 Java Config파일에서 아래와 같은 내용을 설정.

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		if(!registry.hasMappingForPattern("/webjars/**")){
			registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:META-INF/resources/webjars/");
//			registry.addResourceHandler("/**").addResourceLocations("classpath:META-INF/");
		}
		if(!registry.hasMappingForPattern("/static/**")){
			registry.addResourceHandler("/static/**").addResourceLocations("classpath:/static/");
		}
	}

/static 이하는 인증과 관련없이 보여주고 싶다.

WebSecurityConfigurerAdapter를 상속받고 있는 java config파일에서


.antMatchers("/static/**").permitAll()










