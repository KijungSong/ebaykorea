spring boot project generator

https://start.spring.io/

group
examples.boot

Artifact
simpleboard


web, devtools, jpa, mysql, security, Thymeleaf

Spring boot 는 기본적으로 jsp는 지원하지 않는다.
Spring boot는 tomcat을 내장하고 있다.
tomcat을 설치할 필요가 없다.
tomcat을 설치하고, Spring boot 애플리케이션을
배포할 수도 있다. 이때는 jsp가 사용가능하다.
Spring boot는 실행가능한 jar파일이 만들어진다.

java -jar 파일명.jar

H2 dbms에 대한 의존성을 추가하면, Spring boot는
in memory형태로 자동으로 Datasource를 설정한다.

<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>1.4.197</version>
</dependency>


http://localhost:8080/api/books/1


Spring security가 의존성에 추가되어 있으면,
 자동으로 인증관련 설정이 된다.

아래와 같은 설정을 이용하여 기본id, password를
고정할 수 있다.
spring.security.user.name
spring.security.user.password.

 기본 사용자 id : user

Using generated security password:
d54da220-a6bc-4451-8391-daae0836ee2c

------------------------------------
0) User Entity 클래스를 작성

Entity클래스는 java.io.Serializable를 구현한다.
다음과 같은 애노테이션이 설정되야 한다.

javax.persistence.Entity 애노테이션.
javax.persistence.Table 애노테이션.
 - 엔티티와 연관을 맺는 테이블 정보를 설정한다.
  @Table(name = "users")
javax.persistence.Id 애노테이션.
 - table이라면 primary key로 생각하면 된다.
 @GeneratedValue(strategy=GenerationType.IDENTITY)
 - 자동으로 id를 생성하겠다.
 - DBMS마다 id를 생성하는 방법이 다르다.
 - ex> Oracle : sequence객체를 사용
 - jpa를 사용할 경우 자동으로 생성되는 ID를 주는 것이 효율적이다.
----------------------------------------
터미널을 실행하고, 프로젝트 루트 폴더에서 다음과 같이 실행
1) gradle을 설치

gradle clean
gradle build
// build는 수행하는데 test테스크는 실행하지 않음
gradle build -x test
gradle compileQuerydsl
    - target / java 소스폴더 / QUser 클래스 생성

-----------------------------------------

2) UserRepository 인터페이스를 작성

-----------------------------------------

3) application.yml 파일을 작성

Spring boot는 설정 파일이 다양한데, application.properties 또는 application.yml파일도 읽어들인다.
공부할 것 : yml 이 무엇인가?

기존의 application.properties 파일은 삭제

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop

application.properties파일
spring.jpa.hibernate.ddl-auto=create-drop

스프링 부트 애플리케이션이 실행될때 엔티티 관련 테이블을 자동 삭제하고 생성한다.


-----------------------------------------

4) data.sql 파일을 작성

http://www.baeldung.com/spring-boot-data-sql-and-schema-sql

resources 폴더에는

chema.sql , data.sql 파일을 작성할 수 있다.
chema.sql에는 테이블 삭제, 생성관련된 sql을 넣는다.

data.sql 도 애플리케이션이 실행될때마다 자동으로 실행한다. sample data를 넣는다.

insert into users(id, name, email, password, regdate) values (1, 'kim sungpark', 'urstory@gmail.com', '1234', now());
insert into users(id, name, email, password, regdate) values (2, 'lee junsu', 'lee@gmail.com', '1234', now());

-----------------------------------------

5) UserService.java (interface) UserServiceImpl.java (class)


-----------------------------------------

6) UserApiController.java

org.springframework.web.bind.annotation.RestController 애노테이션

스프링 4.0 이전에는 다음의 애노테이션을 붙였다.
@Controller
@ResponseBody

그냥 @Controller가 붙은 클래스의 메소드가 리턴하는 것은 view 이름이었다.
@Controller, @ResponseBody가 붙어있을 경우에는 리턴하는 값이 출력값이다.

만약 리턴값이 List<User> 라면? 어떻게 브라우저에 출력하지?

객체를 브라우저에게 알맞게 출력하기 위해서 사용하는 것이 MessageConverter다. 빈으로 여러개가 등록되어있다.
Spring boot에서는 자동으로 설정되어 있다. 하지만!!!! 맘에 안들때가 있다...그때는 사용자가 바꿔야 한다.


7) http://localhost:8080/api/users

-----------------------------------------


8) intellJ 프로젝트에서 애플리케이션 실행 (설정이 꼬였을 경우 제거하기)

a) intelliJ 프로젝트를 닫는다.
아래의 폴더와 파일들을 삭제한다.

.idea
build
out
target
*.iml

rm -rf .idea/ build out target/
rm *.iml

b) intelliJ에서 gradle프로젝트를 import한다.
gradle project를 import한다.

c) lombok 관련 설정
annotation processing 을 환경설정에서 체크한다. (Lombok 설정)
환경설정 -> Build, Execution, Deployment -> Compiler -> Annotation Processors

d) QClass생성(QueryDSL 을 사용)
gradle build -x test 를 콘솔에서 실행한다. (QClass 생성)
gradle compileQuerydsl -x test 라고 실행해도 된다.

e) Spring Boot Application실행
Spring Boot Application을 실행한다.

f) 소스코드를 수정
Build 메뉴 - Build Project 메뉴를 선택한다. (서버를 재시작 할 필요가 없음. spring boot devtools때문) - 가끔 재시작해야할 경우가 발생하긴 함

*** 도메인(엔티티)객체가 변경되었을 경우에만 d)를 실행한다. 애플리케이션을 재실행한다.